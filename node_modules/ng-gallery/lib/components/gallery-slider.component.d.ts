import { EventEmitter, AfterViewInit, AfterViewChecked, OnDestroy, OnInit, OnChanges, SimpleChanges, NgZone, ElementRef, QueryList, ChangeDetectorRef } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { Subject } from 'rxjs';
import { Gallery } from '../services/gallery.service';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { GalleryConfig } from '../models/config.model';
import { SliderAdapter } from './adapters';
import { SmoothScrollManager } from '../smooth-scroll';
import { GalleryItemComponent } from './gallery-item.component';
import * as i0 from "@angular/core";
interface ScrollObserver {
    value: number;
    behavior: ScrollBehavior;
    onEnd: Function;
}
export declare class GallerySliderComponent implements OnInit, OnChanges, AfterViewInit, AfterViewChecked, OnDestroy {
    private _el;
    private _cd;
    private _zone;
    private _platform;
    private _smoothScroll;
    private _gallery;
    readonly scrollHandler$: Subject<ScrollObserver>;
    /** HammerJS instance */
    private _hammer;
    private intersectionObserver;
    private visibleElements;
    private readonly _destroyed$;
    private _isPanning;
    /** Slider adapter */
    adapter: SliderAdapter;
    /** Gallery ID */
    galleryId: string;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when item is clicked */
    itemClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    sliderEl: ElementRef<HTMLElement>;
    items: QueryList<GalleryItemComponent>;
    get slider(): HTMLElement;
    constructor(_el: ElementRef<HTMLElement>, _cd: ChangeDetectorRef, _zone: NgZone, _platform: Platform, _smoothScroll: SmoothScrollManager, _gallery: Gallery);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    trackByFn(index: number, item: any): any;
    private onHostResize;
    private onViewportScroll;
    private tryScrollToElement;
    private scrollToIndex;
    private enableDisableGestures;
    private activateGestures;
    private deactivateGestures;
    protected onPanEnd(e: any): void;
    private getElementFromViewportCenter;
    private createIntersectionObserver;
    static ɵfac: i0.ɵɵFactoryDeclaration<GallerySliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GallerySliderComponent, "gallery-slider", never, { "galleryId": { "alias": "galleryId"; "required": false; }; "state": { "alias": "state"; "required": false; }; "config": { "alias": "config"; "required": false; }; }, { "itemClick": "itemClick"; "error": "error"; }, never, ["*"], true, never>;
}
export {};

import { AfterViewInit, AfterViewChecked, OnDestroy, OnChanges, QueryList, SimpleChanges, NgZone, ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { GalleryConfig } from '../models/config.model';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { ThumbnailsView } from '../models/constants';
import { ThumbSliderAdapter } from './adapters';
import { SmoothScrollManager } from '../smooth-scroll';
import * as i0 from "@angular/core";
export declare class GalleryThumbsComponent implements AfterViewInit, AfterViewChecked, OnChanges, OnDestroy {
    private _el;
    private _zone;
    private _smoothScroll;
    private _cd;
    private _platform;
    /** HammerJS instance */
    private _hammer;
    /** Thumbnails view enum */
    readonly thumbnailsView: typeof ThumbnailsView;
    private readonly _destroyed$;
    /** Slider adapter */
    adapter: ThumbSliderAdapter;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when thumb is clicked */
    thumbClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    /** Slider ElementRef */
    sliderEl: ElementRef;
    items: QueryList<ElementRef<HTMLElement>>;
    get slider(): HTMLElement;
    constructor(_el: ElementRef, _zone: NgZone, _smoothScroll: SmoothScrollManager, _cd: ChangeDetectorRef, _platform: Platform);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    trackByFn(index: number, item: any): any;
    private scrollToIndex;
    private enableDisableGestures;
    private activateGestures;
    private deactivateGestures;
    static ɵfac: i0.ɵɵFactoryDeclaration<GalleryThumbsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GalleryThumbsComponent, "gallery-thumbs", never, { "state": { "alias": "state"; "required": false; }; "config": { "alias": "config"; "required": false; }; }, { "thumbClick": "thumbClick"; "error": "error"; }, never, never, true, never>;
}

import { OnInit, AfterContentInit, OnChanges, OnDestroy, SimpleChanges, EventEmitter } from '@angular/core';
import { Gallery } from '../services/gallery.service';
import { GalleryRef } from '../services/gallery-ref';
import { GalleryError, GalleryItem, GalleryState } from '../models/gallery.model';
import { IframeItemData, ImageItemData, VideoItemData, YoutubeItemData } from './templates/items.model';
import { BezierEasingOptions } from '../smooth-scroll';
import { GalleryImageDef } from '../directives/gallery-image-def.directive';
import { GalleryThumbDef } from '../directives/gallery-thumb-def.directive';
import { GalleryItemDef } from '../directives/gallery-item-def.directive';
import { GalleryBoxDef } from '../directives/gallery-box-def.directive';
import * as i0 from "@angular/core";
export declare class GalleryComponent implements OnInit, AfterContentInit, OnChanges, OnDestroy {
    private _gallery;
    galleryRef: GalleryRef;
    id: string;
    items: GalleryItem[];
    nav: boolean;
    dots: boolean;
    loop: boolean;
    debug: boolean;
    thumb: boolean;
    counter: boolean;
    dotsSize: number;
    autoPlay: boolean;
    thumbWidth: number;
    thumbHeight: number;
    disableThumb: boolean;
    scrollBehavior: ScrollBehavior;
    navScrollBehavior: ScrollBehavior;
    slidingDisabled: boolean;
    thumbSlidingDisabled: boolean;
    mouseSlidingDisabled: boolean;
    thumbMouseSlidingDisabled: boolean;
    playerInterval: number;
    slidingDuration: number;
    slidingEase: BezierEasingOptions;
    resizeDebounceTime: number;
    imageSize: 'cover' | 'contain';
    thumbImageSize: 'cover' | 'contain';
    dotsPosition: 'top' | 'bottom';
    counterPosition: 'top' | 'bottom';
    slidingDirection: 'horizontal' | 'vertical';
    loadingAttr: 'eager' | 'lazy';
    loadingStrategy: 'preload' | 'lazy' | 'default';
    thumbPosition: 'top' | 'left' | 'right' | 'bottom';
    thumbView: 'default' | 'contain';
    thumbDetached: boolean;
    thumbAutosize: boolean;
    itemAutosize: boolean;
    autoHeight: boolean;
    /** Destroy gallery ref on component destroy event */
    destroyRef: boolean;
    /** Skip initializing the config with components inputs (Lightbox mode) */
    skipInitConfig: boolean;
    itemClick: EventEmitter<number>;
    thumbClick: EventEmitter<number>;
    playingChange: EventEmitter<GalleryState>;
    indexChange: EventEmitter<GalleryState>;
    itemsChange: EventEmitter<GalleryState>;
    error: EventEmitter<GalleryError>;
    galleryItemDef: GalleryItemDef;
    galleryImageDef: GalleryImageDef;
    galleryThumbDef: GalleryThumbDef;
    galleryBoxDef: GalleryBoxDef;
    private _itemClick$;
    private _thumbClick$;
    private _itemChange$;
    private _indexChange$;
    private _playingChange$;
    private _playerListener$;
    constructor(_gallery: Gallery);
    private getConfig;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    onItemClick(i: number): void;
    onThumbClick(i: number): void;
    onError(err: GalleryError): void;
    load(items: GalleryItem[]): void;
    add(item: GalleryItem, active?: boolean): void;
    addImage(data: ImageItemData, active?: boolean): void;
    addVideo(data: VideoItemData, active?: boolean): void;
    addIframe(data: IframeItemData, active?: boolean): void;
    addYoutube(data: YoutubeItemData, active?: boolean): void;
    remove(i: number): void;
    next(behavior?: ScrollBehavior, loop?: boolean): void;
    prev(behavior?: ScrollBehavior, loop?: boolean): void;
    set(i: number, behavior?: ScrollBehavior): void;
    reset(): void;
    play(interval?: number): void;
    stop(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GalleryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GalleryComponent, "gallery", never, { "id": { "alias": "id"; "required": false; }; "items": { "alias": "items"; "required": false; }; "nav": { "alias": "nav"; "required": false; }; "dots": { "alias": "dots"; "required": false; }; "loop": { "alias": "loop"; "required": false; }; "debug": { "alias": "debug"; "required": false; }; "thumb": { "alias": "thumb"; "required": false; }; "counter": { "alias": "counter"; "required": false; }; "dotsSize": { "alias": "dotsSize"; "required": false; }; "autoPlay": { "alias": "autoPlay"; "required": false; }; "thumbWidth": { "alias": "thumbWidth"; "required": false; }; "thumbHeight": { "alias": "thumbHeight"; "required": false; }; "disableThumb": { "alias": "disableThumb"; "required": false; }; "scrollBehavior": { "alias": "scrollBehavior"; "required": false; }; "navScrollBehavior": { "alias": "navScrollBehavior"; "required": false; }; "slidingDisabled": { "alias": "slidingDisabled"; "required": false; }; "thumbSlidingDisabled": { "alias": "thumbSlidingDisabled"; "required": false; }; "mouseSlidingDisabled": { "alias": "mouseSlidingDisabled"; "required": false; }; "thumbMouseSlidingDisabled": { "alias": "thumbMouseSlidingDisabled"; "required": false; }; "playerInterval": { "alias": "playerInterval"; "required": false; }; "slidingDuration": { "alias": "slidingDuration"; "required": false; }; "slidingEase": { "alias": "slidingEase"; "required": false; }; "resizeDebounceTime": { "alias": "resizeDebounceTime"; "required": false; }; "imageSize": { "alias": "imageSize"; "required": false; }; "thumbImageSize": { "alias": "thumbImageSize"; "required": false; }; "dotsPosition": { "alias": "dotsPosition"; "required": false; }; "counterPosition": { "alias": "counterPosition"; "required": false; }; "slidingDirection": { "alias": "slidingDirection"; "required": false; }; "loadingAttr": { "alias": "loadingAttr"; "required": false; }; "loadingStrategy": { "alias": "loadingStrategy"; "required": false; }; "thumbPosition": { "alias": "thumbPosition"; "required": false; }; "thumbView": { "alias": "thumbView"; "required": false; }; "thumbDetached": { "alias": "thumbDetached"; "required": false; }; "thumbAutosize": { "alias": "thumbAutosize"; "required": false; }; "itemAutosize": { "alias": "itemAutosize"; "required": false; }; "autoHeight": { "alias": "autoHeight"; "required": false; }; "destroyRef": { "alias": "destroyRef"; "required": false; }; "skipInitConfig": { "alias": "skipInitConfig"; "required": false; }; }, { "itemClick": "itemClick"; "thumbClick": "thumbClick"; "playingChange": "playingChange"; "indexChange": "indexChange"; "itemsChange": "itemsChange"; "error": "error"; }, ["galleryItemDef", "galleryImageDef", "galleryThumbDef", "galleryBoxDef"], never, true, never>;
}

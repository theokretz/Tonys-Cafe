import { Directive, Input, Inject, Optional, Self, Host, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { ImageItem } from 'ng-gallery';
import { Subject, from, tap, map, switchMap, finalize, debounceTime, EMPTY } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "ng-gallery";
import * as i2 from "./lightbox.service";
class GallerizeDirective {
    constructor(_zone, _el, _gallery, _lightbox, platform, _document, _galleryCmp) {
        this._zone = _zone;
        this._el = _el;
        this._gallery = _gallery;
        this._lightbox = _lightbox;
        this._document = _document;
        this._galleryCmp = _galleryCmp;
        /** Default gallery id */
        this._galleryId = 'lightbox';
        /** The selector used to query images elements */
        this.selector = 'img';
        // Set gallerize mode
        if (isPlatformBrowser(platform)) {
            this._mode = _galleryCmp ? "gallery" /* GallerizeMode.Gallery */ : "detector" /* GallerizeMode.Detector */;
        }
    }
    ngOnInit() {
        this._zone.runOutsideAngular(() => {
            this._galleryId = this.gallerize || this._galleryId;
            const ref = this._gallery.ref(this._galleryId);
            switch (this._mode) {
                case "detector" /* GallerizeMode.Detector */:
                    this.detectorMode(ref);
                    break;
                case "gallery" /* GallerizeMode.Gallery */:
                    this.galleryMode(ref);
            }
        });
    }
    ngOnDestroy() {
        switch (this._mode) {
            case "detector" /* GallerizeMode.Detector */:
                this._detector$.complete();
                this._observer$.disconnect();
                break;
            case "gallery" /* GallerizeMode.Gallery */:
                this._itemClick$.unsubscribe();
                this._itemChange$.unsubscribe();
        }
    }
    /** Gallery mode: means `gallerize` directive is used on `<gallery>` component
     * Adds a click event to each gallery item so it opens in lightbox */
    galleryMode(galleryRef) {
        // Clone its items to the new gallery instance
        this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i) => this._lightbox.open(i, this._galleryId));
        this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state) => galleryRef.load(state.items));
    }
    /** Detector mode: means `gallerize` directive is used on a normal HTMLElement
     *  Detects images and adds a click event to each image, so it opens in the lightbox */
    detectorMode(galleryRef) {
        this._detector$ = new Subject();
        // Query image elements
        this._detector$.pipe(debounceTime(300), switchMap(() => {
            /** get all img elements from content */
            const imageElements = this._el.nativeElement.querySelectorAll(this.selector);
            if (imageElements && imageElements.length) {
                const images = [];
                return from(imageElements).pipe(map((el, i) => {
                    // Add click event to the image
                    el.style.cursor = 'pointer';
                    el.addEventListener('click', () => {
                        this._zone.run(() => this._lightbox.open(i, this._galleryId));
                    });
                    if (el instanceof HTMLImageElement) {
                        // If element is type of img use the src property
                        return {
                            src: el.getAttribute('imageSrc') || el.src,
                            thumb: el.getAttribute('thumbSrc') || el.src
                        };
                    }
                    else {
                        // Otherwise, use element background-image url
                        const elStyle = this._document.defaultView.getComputedStyle(el, null);
                        const background = elStyle.backgroundImage.slice(4, -1).replace(/"/g, '');
                        return {
                            src: el.getAttribute('imageSrc') || background,
                            thumb: el.getAttribute('thumbSrc') || background
                        };
                    }
                }), tap((data) => images.push(new ImageItem(data))), finalize(() => galleryRef.load(images)));
            }
            else {
                return EMPTY;
            }
        })).subscribe();
        // Observe content changes
        this._observer$ = new MutationObserver(() => this._detector$.next());
        this._observer$.observe(this._el.nativeElement, { childList: true, subtree: true });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: GallerizeDirective, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.Gallery }, { token: i2.Lightbox }, { token: PLATFORM_ID }, { token: DOCUMENT }, { token: i1.GalleryComponent, host: true, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.1", type: GallerizeDirective, isStandalone: true, selector: "[gallerize]", inputs: { gallerize: "gallerize", selector: "selector" }, ngImport: i0 }); }
}
export { GallerizeDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: GallerizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[gallerize]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.Gallery }, { type: i2.Lightbox }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.GalleryComponent, decorators: [{
                    type: Host
                }, {
                    type: Self
                }, {
                    type: Optional
                }] }]; }, propDecorators: { gallerize: [{
                type: Input
            }], selector: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyaXplLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWdhbGxlcnkvbGlnaHRib3gvc3JjL2dhbGxlcml6ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBR0wsTUFBTSxFQUNOLFFBQVEsRUFDUixJQUFJLEVBQ0osSUFBSSxFQUdKLFdBQVcsRUFDWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUF1QixTQUFTLEVBQStDLE1BQU0sWUFBWSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxPQUFPLEVBQWdCLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQWV2RyxNQUlhLGtCQUFrQjtJQThCN0IsWUFBb0IsS0FBYSxFQUNiLEdBQWUsRUFDZixRQUFpQixFQUNqQixTQUFtQixFQUNOLFFBQWdCLEVBQ1gsU0FBYyxFQUNKLFdBQTZCO1FBTnpELFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixjQUFTLEdBQVQsU0FBUyxDQUFVO1FBRUQsY0FBUyxHQUFULFNBQVMsQ0FBSztRQUNKLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQWxDN0UseUJBQXlCO1FBQ2pCLGVBQVUsR0FBRyxVQUFVLENBQUM7UUF3QmhDLGlEQUFpRDtRQUN4QyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBVXhCLHFCQUFxQjtRQUNyQixJQUFJLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFD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LENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdEYsQ0FBQzs4R0FuSVUsa0JBQWtCLGlIQWtDVCxXQUFXLGFBQ1gsUUFBUTtrR0FuQ2pCLGtCQUFrQjs7U0FBbEIsa0JBQWtCOzJGQUFsQixrQkFBa0I7a0JBSjlCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjs7MEJBbUNjLE1BQU07MkJBQUMsV0FBVzs7MEJBQ2xCLE1BQU07MkJBQUMsUUFBUTs7MEJBQ2YsSUFBSTs7MEJBQUksSUFBSTs7MEJBQUksUUFBUTs0Q0FYNUIsU0FBUztzQkFBakIsS0FBSztnQkFHRyxRQUFRO3NCQUFoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgT25Jbml0LFxyXG4gIE9uRGVzdHJveSxcclxuICBJbmplY3QsXHJcbiAgT3B0aW9uYWwsXHJcbiAgU2VsZixcclxuICBIb3N0LFxyXG4gIE5nWm9uZSxcclxuICBFbGVtZW50UmVmLFxyXG4gIFBMQVRGT1JNX0lEXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5ULCBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEdhbGxlcnksIEdhbGxlcnlSZWYsIEltYWdlSXRlbSwgR2FsbGVyeUNvbXBvbmVudCwgR2FsbGVyeVN0YXRlLCBHYWxsZXJ5SXRlbSB9IGZyb20gJ25nLWdhbGxlcnknO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBTdWJzY3JpcHRpb24sIGZyb20sIHRhcCwgbWFwLCBzd2l0Y2hNYXAsIGZpbmFsaXplLCBkZWJvdW5jZVRpbWUsIEVNUFRZIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBMaWdodGJveCB9IGZyb20gJy4vbGlnaHRib3guc2VydmljZSc7XHJcblxyXG4vKipcclxuICogVGhpcyBkaXJlY3RpdmUgaGFzIDIgbW9kZXM6XHJcbiAqIDEgLSBJZiBob3N0IGVsZW1lbnQgaXMgYSBIVE1MRWxlbWVudCwgaXQgZGV0ZWN0cyB0aGUgaW1hZ2VzIGFuZCBob29rcyB0aGVpciBjbGlja3MgdG8gbGlnaHRib3hcclxuICogMiAtIElmIGhvc3QgZWxlbWVudCBpcyBhIEdhbGxlcnlDb21wb25lbnQsIGl0IGhvb2tzIHRoZSBpbWFnZXMgY2xpY2sgdG8gdGhlIGxpZ2h0Ym94XHJcbiAqL1xyXG5cclxuY29uc3QgZW51bSBHYWxsZXJpemVNb2RlIHtcclxuICBEZXRlY3RvciA9ICdkZXRlY3RvcicsXHJcbiAgR2FsbGVyeSA9ICdnYWxsZXJ5J1xyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tnYWxsZXJpemVdJyxcclxuICBzdGFuZGFsb25lOiB0cnVlXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJpemVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIC8qKiBEZWZhdWx0IGdhbGxlcnkgaWQgKi9cclxuICBwcml2YXRlIF9nYWxsZXJ5SWQgPSAnbGlnaHRib3gnO1xyXG5cclxuICAvKiogR2FsbGVyaXplIG1vZGUgKi9cclxuICBwcml2YXRlIHJlYWRvbmx5IF9tb2RlOiBHYWxsZXJpemVNb2RlO1xyXG5cclxuICAvKiogSWYgaG9zdCBlbGVtZW50IGlzIGEgSFRNTEVsZW1lbnQsIHdpbGwgdXNlIHRoZSBmb2xsb3dpbmcgdmFyaWFibGVzOiAqL1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgdG8gZmlyZSB0aGUgZGV0ZWN0aW9uIHN0cmVhbSB0aGUgaW1hZ2UgZWxlbWVudHMgaGFzIGNoYW5nZWQgKi9cclxuICBwcml2YXRlIF9vYnNlcnZlciQ6IGFueTtcclxuXHJcbiAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gaW1hZ2UgaXMgZGlzY292ZXIgKi9cclxuICBwcml2YXRlIF9kZXRlY3RvciQ6IFN1YmplY3Q8dm9pZD47XHJcblxyXG4gIC8qKiBJZiBob3N0IGVsZW1lbnQgaXMgYSBHYWxsZXJ5Q29tcG9uZW50LCB3aWxsIHVzZSB0aGUgZm9sbG93aW5nIHZhcmlhYmxlczogKi9cclxuXHJcbiAgLyoqIEdhbGxlcnkgZXZlbnRzIChpZiB1c2VkIG9uIGEgZ2FsbGVyeSBjb21wb25lbnQpICovXHJcbiAgcHJpdmF0ZSBfaXRlbUNsaWNrJDogU3Vic2NyaXB0aW9uO1xyXG4gIHByaXZhdGUgX2l0ZW1DaGFuZ2UkOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAvKiogSWYgc2V0LCBpdCB3aWxsIGJlY29tZSB0aGUgZ2FsbGVyeSBpZCAqL1xyXG4gIEBJbnB1dCgpIGdhbGxlcml6ZTogc3RyaW5nO1xyXG5cclxuICAvKiogVGhlIHNlbGVjdG9yIHVzZWQgdG8gcXVlcnkgaW1hZ2VzIGVsZW1lbnRzICovXHJcbiAgQElucHV0KCkgc2VsZWN0b3IgPSAnaW1nJztcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfem9uZTogTmdab25lLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgX2VsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgX2dhbGxlcnk6IEdhbGxlcnksXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfbGlnaHRib3g6IExpZ2h0Ym94LFxyXG4gICAgICAgICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtOiBPYmplY3QsXHJcbiAgICAgICAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBfZG9jdW1lbnQ6IGFueSxcclxuICAgICAgICAgICAgICBASG9zdCgpIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBfZ2FsbGVyeUNtcDogR2FsbGVyeUNvbXBvbmVudCkge1xyXG5cclxuICAgIC8vIFNldCBnYWxsZXJpemUgbW9kZVxyXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtKSkge1xyXG4gICAgICB0aGlzLl9tb2RlID0gX2dhbGxlcnlDbXAgPyBHYWxsZXJpemVNb2RlLkdhbGxlcnkgOiBHYWxsZXJpemVNb2RlLkRldGVjdG9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgdGhpcy5fZ2FsbGVyeUlkID0gdGhpcy5nYWxsZXJpemUgfHwgdGhpcy5fZ2FsbGVyeUlkO1xyXG4gICAgICBjb25zdCByZWYgPSB0aGlzLl9nYWxsZXJ5LnJlZih0aGlzLl9nYWxsZXJ5SWQpO1xyXG5cclxuICAgICAgc3dpdGNoICh0aGlzLl9tb2RlKSB7XHJcbiAgICAgICAgY2FzZSBHYWxsZXJpemVNb2RlLkRldGVjdG9yOlxyXG4gICAgICAgICAgdGhpcy5kZXRlY3Rvck1vZGUocmVmKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgR2FsbGVyaXplTW9kZS5HYWxsZXJ5OlxyXG4gICAgICAgICAgdGhpcy5nYWxsZXJ5TW9kZShyZWYpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgc3dpdGNoICh0aGlzLl9tb2RlKSB7XHJcbiAgICAgIGNhc2UgR2FsbGVyaXplTW9kZS5EZXRlY3RvcjpcclxuICAgICAgICB0aGlzLl9kZXRlY3RvciQuY29tcGxldGUoKTtcclxuICAgICAgICB0aGlzLl9vYnNlcnZlciQuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEdhbGxlcml6ZU1vZGUuR2FsbGVyeTpcclxuICAgICAgICB0aGlzLl9pdGVtQ2xpY2skLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy5faXRlbUNoYW5nZSQudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBHYWxsZXJ5IG1vZGU6IG1lYW5zIGBnYWxsZXJpemVgIGRpcmVjdGl2ZSBpcyB1c2VkIG9uIGA8Z2FsbGVyeT5gIGNvbXBvbmVudFxyXG4gICAqIEFkZHMgYSBjbGljayBldmVudCB0byBlYWNoIGdhbGxlcnkgaXRlbSBzbyBpdCBvcGVucyBpbiBsaWdodGJveCAqL1xyXG4gIHByaXZhdGUgZ2FsbGVyeU1vZGUoZ2FsbGVyeVJlZjogR2FsbGVyeVJlZikge1xyXG4gICAgLy8gQ2xvbmUgaXRzIGl0ZW1zIHRvIHRoZSBuZXcgZ2FsbGVyeSBpbnN0YW5jZVxyXG4gICAgdGhpcy5faXRlbUNsaWNrJCA9IHRoaXMuX2dhbGxlcnlDbXAuZ2FsbGVyeVJlZi5pdGVtQ2xpY2suc3Vic2NyaWJlKChpOiBudW1iZXIpID0+IHRoaXMuX2xpZ2h0Ym94Lm9wZW4oaSwgdGhpcy5fZ2FsbGVyeUlkKSk7XHJcbiAgICB0aGlzLl9pdGVtQ2hhbmdlJCA9IHRoaXMuX2dhbGxlcnlDbXAuZ2FsbGVyeVJlZi5pdGVtc0NoYW5nZWQuc3Vic2NyaWJlKChzdGF0ZTogR2FsbGVyeVN0YXRlKSA9PiBnYWxsZXJ5UmVmLmxvYWQoc3RhdGUuaXRlbXMpKTtcclxuICB9XHJcblxyXG4gIC8qKiBEZXRlY3RvciBtb2RlOiBtZWFucyBgZ2FsbGVyaXplYCBkaXJlY3RpdmUgaXMgdXNlZCBvbiBhIG5vcm1hbCBIVE1MRWxlbWVudFxyXG4gICAqICBEZXRlY3RzIGltYWdlcyBhbmQgYWRkcyBhIGNsaWNrIGV2ZW50IHRvIGVhY2ggaW1hZ2UsIHNvIGl0IG9wZW5zIGluIHRoZSBsaWdodGJveCAqL1xyXG4gIHByaXZhdGUgZGV0ZWN0b3JNb2RlKGdhbGxlcnlSZWY6IEdhbGxlcnlSZWYpIHtcclxuICAgIHRoaXMuX2RldGVjdG9yJCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICAvLyBRdWVyeSBpbWFnZSBlbGVtZW50c1xyXG4gICAgdGhpcy5fZGV0ZWN0b3IkLnBpcGUoXHJcbiAgICAgIGRlYm91bmNlVGltZSgzMDApLFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xyXG5cclxuICAgICAgICAvKiogZ2V0IGFsbCBpbWcgZWxlbWVudHMgZnJvbSBjb250ZW50ICovXHJcbiAgICAgICAgY29uc3QgaW1hZ2VFbGVtZW50cyA9IHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgaWYgKGltYWdlRWxlbWVudHMgJiYgaW1hZ2VFbGVtZW50cy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICBjb25zdCBpbWFnZXM6IEdhbGxlcnlJdGVtW10gPSBbXTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gZnJvbShpbWFnZUVsZW1lbnRzKS5waXBlKFxyXG4gICAgICAgICAgICBtYXAoKGVsOiBIVE1MRWxlbWVudCwgaTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgLy8gQWRkIGNsaWNrIGV2ZW50IHRvIHRoZSBpbWFnZVxyXG4gICAgICAgICAgICAgIGVsLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcclxuICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHRoaXMuX2xpZ2h0Ym94Lm9wZW4oaSwgdGhpcy5fZ2FsbGVyeUlkKSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChlbCBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIGVsZW1lbnQgaXMgdHlwZSBvZiBpbWcgdXNlIHRoZSBzcmMgcHJvcGVydHlcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgIHNyYzogZWwuZ2V0QXR0cmlidXRlKCdpbWFnZVNyYycpIHx8IGVsLnNyYyxcclxuICAgICAgICAgICAgICAgICAgdGh1bWI6IGVsLmdldEF0dHJpYnV0ZSgndGh1bWJTcmMnKSB8fCBlbC5zcmNcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgdXNlIGVsZW1lbnQgYmFja2dyb3VuZC1pbWFnZSB1cmxcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsU3R5bGUgPSB0aGlzLl9kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhY2tncm91bmQgPSBlbFN0eWxlLmJhY2tncm91bmRJbWFnZS5zbGljZSg0LCAtMSkucmVwbGFjZSgvXCIvZywgJycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgc3JjOiBlbC5nZXRBdHRyaWJ1dGUoJ2ltYWdlU3JjJykgfHwgYmFja2dyb3VuZCxcclxuICAgICAgICAgICAgICAgICAgdGh1bWI6IGVsLmdldEF0dHJpYnV0ZSgndGh1bWJTcmMnKSB8fCBiYWNrZ3JvdW5kXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHRhcCgoZGF0YTogYW55KSA9PiBpbWFnZXMucHVzaChuZXcgSW1hZ2VJdGVtKGRhdGEpKSksXHJcbiAgICAgICAgICAgIGZpbmFsaXplKCgpID0+IGdhbGxlcnlSZWYubG9hZChpbWFnZXMpKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICkuc3Vic2NyaWJlKCk7XHJcblxyXG4gICAgLy8gT2JzZXJ2ZSBjb250ZW50IGNoYW5nZXNcclxuICAgIHRoaXMuX29ic2VydmVyJCA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHRoaXMuX2RldGVjdG9yJC5uZXh0KCkpO1xyXG4gICAgdGhpcy5fb2JzZXJ2ZXIkLm9ic2VydmUodGhpcy5fZWwubmF0aXZlRWxlbWVudCwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==
import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { NgFor, NgIf } from '@angular/common';
import * as i0 from "@angular/core";
class GalleryVideoComponent {
    constructor() {
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
    }
    set pauseVideo(shouldPause) {
        if (this.video.nativeElement) {
            const video = this.video.nativeElement;
            if (shouldPause && !video.paused) {
                video.pause();
            }
        }
    }
    set playVideo(shouldPlay) {
        if (this.video.nativeElement) {
            const video = this.video.nativeElement;
            if (shouldPlay) {
                video.play();
            }
        }
    }
    ngOnInit() {
        if (this.src instanceof Array) {
            // If video has multiple sources
            this.videoSources = [...this.src];
        }
        else {
            this.videoSources = [{ url: this.src }];
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: GalleryVideoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.1", type: GalleryVideoComponent, isStandalone: true, selector: "gallery-video", inputs: { src: "src", poster: "poster", mute: "mute", loop: "loop", controls: "controls", controlsList: "controlsList", disableRemotePlayback: "disableRemotePlayback", disablePictureInPicture: "disablePictureInPicture", pauseVideo: ["pause", "pauseVideo"], playVideo: ["play", "playVideo"] }, outputs: { error: "error" }, viewQueries: [{ propertyName: "video", first: true, predicate: ["video"], descendants: true, static: true }], ngImport: i0, template: `
    <video #video
           [attr.mute]="mute"
           [attr.controlsList]="controlsList"
           [attr.disablePictureInPicture]="disablePictureInPicture"
           [disableRemotePlayback]="disableRemotePlayback"
           [controls]="controls"
           [loop]="loop"
           [poster]="poster"
           (error)="error.emit($event)">
      <ng-container *ngFor="let src of videoSources">
        <source *ngIf="src?.type; else noType" [src]="src?.url" [type]="src.type"/>
        <ng-template #noType>
          <source [src]="src?.url"/>
        </ng-template>
      </ng-container>
    </video>
  `, isInline: true, dependencies: [{ kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { GalleryVideoComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: GalleryVideoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-video',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <video #video
           [attr.mute]="mute"
           [attr.controlsList]="controlsList"
           [attr.disablePictureInPicture]="disablePictureInPicture"
           [disableRemotePlayback]="disableRemotePlayback"
           [controls]="controls"
           [loop]="loop"
           [poster]="poster"
           (error)="error.emit($event)">
      <ng-container *ngFor="let src of videoSources">
        <source *ngIf="src?.type; else noType" [src]="src?.url" [type]="src.type"/>
        <ng-template #noType>
          <source [src]="src?.url"/>
        </ng-template>
      </ng-container>
    </video>
  `,
                    standalone: true,
                    imports: [NgFor, NgIf]
                }]
        }], propDecorators: { src: [{
                type: Input
            }], poster: [{
                type: Input
            }], mute: [{
                type: Input
            }], loop: [{
                type: Input
            }], controls: [{
                type: Input
            }], controlsList: [{
                type: Input
            }], disableRemotePlayback: [{
                type: Input
            }], disablePictureInPicture: [{
                type: Input
            }], pauseVideo: [{
                type: Input,
                args: ['pause']
            }], playVideo: [{
                type: Input,
                args: ['play']
            }], error: [{
                type: Output
            }], video: [{
                type: ViewChild,
                args: ['video', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS12aWRlby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1nYWxsZXJ5L3NyYy9saWIvY29tcG9uZW50cy90ZW1wbGF0ZXMvZ2FsbGVyeS12aWRlby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBVSxTQUFTLEVBQWMsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0gsT0FBTyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFOUMsTUF3QmEscUJBQXFCO0lBeEJsQztRQXVERSw2Q0FBNkM7UUFDbkMsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7S0FZbEQ7SUEvQkMsSUFBb0IsVUFBVSxDQUFDLFdBQW9CO1FBQ2pELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDNUIsTUFBTSxLQUFLLEdBQXFCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO1lBQ3pELElBQUksV0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtnQkFDaEMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2Y7U0FDRjtJQUNILENBQUM7SUFFRCxJQUFtQixTQUFTLENBQUMsVUFBbUI7UUFDOUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRTtZQUM1QixNQUFNLEtBQUssR0FBcUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7WUFDekQsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2Q7U0FDRjtJQUNILENBQUM7SUFPRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsR0FBRyxZQUFZLEtBQUssRUFBRTtZQUM3QixnQ0FBZ0M7WUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25DO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDOzhHQTNDVSxxQkFBcUI7a0dBQXJCLHFCQUFxQix5ZkFyQnRCOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCVCw0REFFUyxLQUFLLG1IQUFFLElBQUk7O1NBRVYscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBeEJqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCVDtvQkFDRCxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQztpQkFDdkI7OEJBS1UsR0FBRztzQkFBWCxLQUFLO2dCQUNHLE1BQU07c0JBQWQsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFDRyxxQkFBcUI7c0JBQTdCLEtBQUs7Z0JBQ0csdUJBQXVCO3NCQUEvQixLQUFLO2dCQUVjLFVBQVU7c0JBQTdCLEtBQUs7dUJBQUMsT0FBTztnQkFTSyxTQUFTO3NCQUEzQixLQUFLO3VCQUFDLE1BQU07Z0JBVUgsS0FBSztzQkFBZCxNQUFNO2dCQUUrQixLQUFLO3NCQUExQyxTQUFTO3VCQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nRm9yLCBOZ0lmIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ2FsbGVyeS12aWRlbycsXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDx2aWRlbyAjdmlkZW9cclxuICAgICAgICAgICBbYXR0ci5tdXRlXT1cIm11dGVcIlxyXG4gICAgICAgICAgIFthdHRyLmNvbnRyb2xzTGlzdF09XCJjb250cm9sc0xpc3RcIlxyXG4gICAgICAgICAgIFthdHRyLmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlXT1cImRpc2FibGVQaWN0dXJlSW5QaWN0dXJlXCJcclxuICAgICAgICAgICBbZGlzYWJsZVJlbW90ZVBsYXliYWNrXT1cImRpc2FibGVSZW1vdGVQbGF5YmFja1wiXHJcbiAgICAgICAgICAgW2NvbnRyb2xzXT1cImNvbnRyb2xzXCJcclxuICAgICAgICAgICBbbG9vcF09XCJsb29wXCJcclxuICAgICAgICAgICBbcG9zdGVyXT1cInBvc3RlclwiXHJcbiAgICAgICAgICAgKGVycm9yKT1cImVycm9yLmVtaXQoJGV2ZW50KVwiPlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBzcmMgb2YgdmlkZW9Tb3VyY2VzXCI+XHJcbiAgICAgICAgPHNvdXJjZSAqbmdJZj1cInNyYz8udHlwZTsgZWxzZSBub1R5cGVcIiBbc3JjXT1cInNyYz8udXJsXCIgW3R5cGVdPVwic3JjLnR5cGVcIi8+XHJcbiAgICAgICAgPG5nLXRlbXBsYXRlICNub1R5cGU+XHJcbiAgICAgICAgICA8c291cmNlIFtzcmNdPVwic3JjPy51cmxcIi8+XHJcbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICA8L3ZpZGVvPlxyXG4gIGAsXHJcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcclxuICBpbXBvcnRzOiBbTmdGb3IsIE5nSWZdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJ5VmlkZW9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICB2aWRlb1NvdXJjZXM6IHsgdXJsOiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcgfVtdO1xyXG5cclxuICBASW5wdXQoKSBzcmM6IHN0cmluZyB8IHsgdXJsOiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcgfVtdO1xyXG4gIEBJbnB1dCgpIHBvc3Rlcjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIG11dGU6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgbG9vcDogYm9vbGVhbjtcclxuICBASW5wdXQoKSBjb250cm9sczogYm9vbGVhbjtcclxuICBASW5wdXQoKSBjb250cm9sc0xpc3Q6ICdub2Rvd25sb2FkJyB8ICdub2Z1bGxzY3JlZW4nIHwgJ25vcmVtb3RlcGxheWJhY2snO1xyXG4gIEBJbnB1dCgpIGRpc2FibGVSZW1vdGVQbGF5YmFjazogYm9vbGVhbjtcclxuICBASW5wdXQoKSBkaXNhYmxlUGljdHVyZUluUGljdHVyZTogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KCdwYXVzZScpIHNldCBwYXVzZVZpZGVvKHNob3VsZFBhdXNlOiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy52aWRlby5uYXRpdmVFbGVtZW50KSB7XHJcbiAgICAgIGNvbnN0IHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50ID0gdGhpcy52aWRlby5uYXRpdmVFbGVtZW50O1xyXG4gICAgICBpZiAoc2hvdWxkUGF1c2UgJiYgIXZpZGVvLnBhdXNlZCkge1xyXG4gICAgICAgIHZpZGVvLnBhdXNlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBJbnB1dCgncGxheScpIHNldCBwbGF5VmlkZW8oc2hvdWxkUGxheTogYm9vbGVhbikge1xyXG4gICAgaWYgKHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudCkge1xyXG4gICAgICBjb25zdCB2aWRlbzogSFRNTFZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW8ubmF0aXZlRWxlbWVudDtcclxuICAgICAgaWYgKHNob3VsZFBsYXkpIHtcclxuICAgICAgICB2aWRlby5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGFuIGVycm9yIG9jY3VycyAqL1xyXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8RXJyb3JFdmVudD4oKTtcclxuXHJcbiAgQFZpZXdDaGlsZCgndmlkZW8nLCB7IHN0YXRpYzogdHJ1ZSB9KSB2aWRlbzogRWxlbWVudFJlZjtcclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAodGhpcy5zcmMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAvLyBJZiB2aWRlbyBoYXMgbXVsdGlwbGUgc291cmNlc1xyXG4gICAgICB0aGlzLnZpZGVvU291cmNlcyA9IFsuLi50aGlzLnNyY107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnZpZGVvU291cmNlcyA9IFt7IHVybDogdGhpcy5zcmMgfV07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==
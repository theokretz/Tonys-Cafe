import { Component, Input, Output, HostBinding, ChangeDetectionStrategy, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GalleryCounterComponent } from './gallery-counter.component';
import { GalleryDotsComponent } from './gallery-dots.component';
import { GalleryNavComponent } from './gallery-nav.component';
import { GallerySliderComponent } from './gallery-slider.component';
import { GalleryThumbsComponent } from './gallery-thumbs.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
class GalleryCoreComponent {
    constructor() {
        this.itemClick = new EventEmitter();
        this.thumbClick = new EventEmitter();
        this.error = new EventEmitter();
    }
    /** Set thumbnails position */
    get thumbPosition() {
        return this.config.thumbPosition;
    }
    /** Set sliding direction */
    get slidingDirection() {
        return this.config.slidingDirection;
    }
    /** Disable thumbnails clicks */
    get disableThumb() {
        return this.config.disableThumb;
    }
    /** Set gallery image size */
    get imageSize() {
        return this.config.imageSize;
    }
    get thumbImageSize() {
        return this.config.thumbImageSize;
    }
    /** Set gallery dots position */
    get dotsPosition() {
        return this.config.dotsPosition;
    }
    /** Set gallery counter position */
    get counterPosition() {
        return this.config.counterPosition;
    }
    /** Set gallery counter position */
    get slidingDisabled() {
        return this.config.slidingDisabled;
    }
    /** Set gallery counter position */
    get thumbSlidingDisabled() {
        return this.config.thumbSlidingDisabled;
    }
    /** Set gallery slider itemAutosize style  */
    get itemAutosize() {
        return this.config.itemAutosize;
    }
    /** Set gallery slider autoHeight style  */
    get autoHeight() {
        return this.config.autoHeight;
    }
    /** Set gallery slider thumbAutosize style  */
    get thumbAutosize() {
        return this.config.thumbAutosize;
    }
    /** Set debug style  */
    get debug() {
        return this.config.debug;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: GalleryCoreComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.1", type: GalleryCoreComponent, isStandalone: true, selector: "gallery-core", inputs: { galleryId: "galleryId", state: "state", config: "config" }, outputs: { itemClick: "itemClick", thumbClick: "thumbClick", error: "error" }, host: { properties: { "attr.thumbPosition": "this.thumbPosition", "attr.slidingDirection": "this.slidingDirection", "attr.disableThumb": "this.disableThumb", "attr.imageSize": "this.imageSize", "attr.thumbImageSize": "this.thumbImageSize", "attr.dotsPosition": "this.dotsPosition", "attr.counterPosition": "this.counterPosition", "attr.slidingDisabled": "this.slidingDisabled", "attr.thumbSlidingDisabled": "this.thumbSlidingDisabled", "attr.itemAutosize": "this.itemAutosize", "attr.autoHeight": "this.autoHeight", "attr.thumbAutosize": "this.thumbAutosize", "attr.debug": "this.debug" } }, ngImport: i0, template: `
    <gallery-thumbs *ngIf="config.thumb"
                    [state]="state"
                    [config]="config"
                    (thumbClick)="thumbClick.emit($event)"
                    (error)="error.emit($event)">
    </gallery-thumbs>

    <div class="g-box">
      <gallery-slider [state]="state"
                      [config]="config"
                      [galleryId]="galleryId"
                      (itemClick)="itemClick.emit($event)"
                      (error)="error.emit($event)">

        <gallery-nav *ngIf="config.nav && state.items.length > 1"
                     [state]="state"
                     [config]="config"
                     [galleryId]="galleryId">
        </gallery-nav>

      </gallery-slider>

      <gallery-dots *ngIf="config.dots"
                    [state]="state"
                    [config]="config"
                    [galleryId]="galleryId">
      </gallery-dots>

      <gallery-counter *ngIf="config.counter"
                       [state]="state">
      </gallery-counter>

      <div class="g-box-template">
        <ng-container *ngTemplateOutlet="config.boxTemplate; context: { state: state, config: config }"></ng-container>
      </div>
    </div>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: GalleryThumbsComponent, selector: "gallery-thumbs", inputs: ["state", "config"], outputs: ["thumbClick", "error"] }, { kind: "component", type: GallerySliderComponent, selector: "gallery-slider", inputs: ["galleryId", "state", "config"], outputs: ["itemClick", "error"] }, { kind: "component", type: GalleryNavComponent, selector: "gallery-nav", inputs: ["galleryId", "state", "config"] }, { kind: "component", type: GalleryDotsComponent, selector: "gallery-dots", inputs: ["galleryId", "state", "config"] }, { kind: "component", type: GalleryCounterComponent, selector: "gallery-counter", inputs: ["state"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { GalleryCoreComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: GalleryCoreComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-core',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <gallery-thumbs *ngIf="config.thumb"
                    [state]="state"
                    [config]="config"
                    (thumbClick)="thumbClick.emit($event)"
                    (error)="error.emit($event)">
    </gallery-thumbs>

    <div class="g-box">
      <gallery-slider [state]="state"
                      [config]="config"
                      [galleryId]="galleryId"
                      (itemClick)="itemClick.emit($event)"
                      (error)="error.emit($event)">

        <gallery-nav *ngIf="config.nav && state.items.length > 1"
                     [state]="state"
                     [config]="config"
                     [galleryId]="galleryId">
        </gallery-nav>

      </gallery-slider>

      <gallery-dots *ngIf="config.dots"
                    [state]="state"
                    [config]="config"
                    [galleryId]="galleryId">
      </gallery-dots>

      <gallery-counter *ngIf="config.counter"
                       [state]="state">
      </gallery-counter>

      <div class="g-box-template">
        <ng-container *ngTemplateOutlet="config.boxTemplate; context: { state: state, config: config }"></ng-container>
      </div>
    </div>
  `,
                    standalone: true,
                    imports: [CommonModule, GalleryThumbsComponent, GallerySliderComponent, GalleryNavComponent, GalleryDotsComponent, GalleryCounterComponent]
                }]
        }], propDecorators: { galleryId: [{
                type: Input
            }], state: [{
                type: Input
            }], config: [{
                type: Input
            }], itemClick: [{
                type: Output
            }], thumbClick: [{
                type: Output
            }], error: [{
                type: Output
            }], thumbPosition: [{
                type: HostBinding,
                args: ['attr.thumbPosition']
            }], slidingDirection: [{
                type: HostBinding,
                args: ['attr.slidingDirection']
            }], disableThumb: [{
                type: HostBinding,
                args: ['attr.disableThumb']
            }], imageSize: [{
                type: HostBinding,
                args: ['attr.imageSize']
            }], thumbImageSize: [{
                type: HostBinding,
                args: ['attr.thumbImageSize']
            }], dotsPosition: [{
                type: HostBinding,
                args: ['attr.dotsPosition']
            }], counterPosition: [{
                type: HostBinding,
                args: ['attr.counterPosition']
            }], slidingDisabled: [{
                type: HostBinding,
                args: ['attr.slidingDisabled']
            }], thumbSlidingDisabled: [{
                type: HostBinding,
                args: ['attr.thumbSlidingDisabled']
            }], itemAutosize: [{
                type: HostBinding,
                args: ['attr.itemAutosize']
            }], autoHeight: [{
                type: HostBinding,
                args: ['attr.autoHeight']
            }], thumbAutosize: [{
                type: HostBinding,
                args: ['attr.thumbAutosize']
            }], debug: [{
                type: HostBinding,
                args: ['attr.debug']
            }] } });
//# sourceMappingURL=data:application/json;base64,
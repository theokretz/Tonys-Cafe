import { Component, Input, Output, EventEmitter, ViewChild, ViewChildren, QueryList, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { from, distinctUntilChanged, fromEvent, mergeMap, startWith, tap, debounceTime, filter, takeUntil, switchMap, Observable, Subject, EMPTY, animationFrameScheduler } from 'rxjs';
import { SlidingDirection } from '../models/constants';
import { HorizontalAdapter, VerticalAdapter } from './adapters';
import { resizeObservable } from '../utils/resize-observer';
import { GalleryItemComponent } from './gallery-item.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/platform";
import * as i2 from "../smooth-scroll";
import * as i3 from "../services/gallery.service";
import * as i4 from "@angular/common";
class GallerySliderComponent {
    get slider() {
        return this.sliderEl.nativeElement;
    }
    constructor(_el, _cd, _zone, _platform, _smoothScroll, _gallery) {
        this._el = _el;
        this._cd = _cd;
        this._zone = _zone;
        this._platform = _platform;
        this._smoothScroll = _smoothScroll;
        this._gallery = _gallery;
        this.scrollHandler$ = new Subject();
        this.visibleElements = new Map();
        this._destroyed$ = new Subject();
        /** Stream that emits when item is clicked */
        this.itemClick = new EventEmitter();
        /** Stream that emits when an error occurs */
        this.error = new EventEmitter();
        this.items = new QueryList();
        this.scrollHandler$.pipe(debounceTime(0, animationFrameScheduler), switchMap(({ value, behavior }) => {
            this._gallery.debugConsole('[Gallery scrollHandler$] ', this.slider.style.scrollSnapType);
            this.slider.style.scrollSnapType = 'unset';
            const el = this.items.get(value)?.element;
            this._gallery.debugConsole('🤯 [Gallery scrollHandler$] scrollSnapType = unset, scrollTo element', !!el);
            if (el) {
                this.slider.classList.add('g-scrolling');
                const pos = this.adapter.getScrollToValue(el, behavior || this.config.scrollBehavior);
                const index = +this.items.get(value)?.element.getAttribute('galleryIndex');
                this._gallery.debugConsole(`🚀 [Gallery scrollHandler$] Scroll start ===> index: ${index}, position:`, pos);
                this._gallery.debugConsole(`🚀 [Gallery scrollHandler$] slider scrollable`, this.adapter.scrollValue);
                return from(this._smoothScroll.scrollTo(this.slider, pos)).pipe(tap(() => {
                    // Reset viewport properties on scroll end
                    this._isPanning = false;
                    this.slider.classList.remove('g-scrolling');
                    this.slider.style.scrollSnapType = this.adapter.scrollSnapType;
                    this._gallery.debugConsole('✅ [Gallery scrollHandler$] Scroll end');
                }));
            }
            this._gallery.debugConsole('😡 [Gallery scrollHandler$] Scroll element was not found!');
            return EMPTY;
        }), takeUntil(this._destroyed$)).subscribe();
    }
    ngOnChanges(changes) {
        if (changes.config) {
            if (changes.config.currentValue?.slidingDirection !== changes.config.previousValue?.slidingDirection) {
                switch (this.config.slidingDirection) {
                    case SlidingDirection.Horizontal:
                        this.adapter = new HorizontalAdapter(this.slider, this.config);
                        break;
                    case SlidingDirection.Vertical:
                        this.adapter = new VerticalAdapter(this.slider, this.config);
                        break;
                }
                if (this._platform.isBrowser) {
                    if (!changes.config.firstChange) {
                        requestAnimationFrame(() => {
                            // Keep the correct sliding position when direction changes
                            this.scrollToIndex(this.state.currIndex, 'auto');
                        });
                    }
                    // Reactivate gestures
                    this.enableDisableGestures();
                }
            }
            if (this._platform.isBrowser && !changes.config.firstChange) {
                if (changes.config.currentValue?.mouseSlidingDisabled !== changes.config.previousValue?.mouseSlidingDisabled) {
                    this.enableDisableGestures();
                }
            }
        }
        // Scroll to current index
        if (this._platform.isBrowser && changes.state && changes.state.currentValue?.currIndex !== changes.state.previousValue?.currIndex) {
            requestAnimationFrame(() => {
                this.scrollToIndex(this.state.currIndex, changes.state.firstChange ? 'auto' : this.state.behavior);
            });
        }
    }
    ngOnInit() {
        if (this._platform.isBrowser) {
            this._zone.runOutsideAngular(() => {
                // We need to set the visibleElements in the viewport using intersection observer
                this.createIntersectionObserver(this.slider).pipe(tap((entry) => {
                    entry.target.classList.toggle('g-item-visible', entry.isIntersecting);
                    if (entry.isIntersecting) {
                        this.visibleElements.set(entry.target, entry);
                    }
                    else {
                        this.visibleElements.delete(entry.target);
                    }
                }), takeUntil(this._destroyed$)).subscribe();
                // Subscribe to slider scroll event
                fromEvent(this.slider, 'scroll', { passive: true }).pipe(debounceTime(50), filter(() => !this._isPanning), tap(() => this.onViewportScroll()), takeUntil(this._destroyed$)).subscribe();
                // Detect if the size of the slider has changed detecting current index on scroll
                resizeObservable(this._el.nativeElement).pipe(debounceTime(this.config.resizeDebounceTime), tap(([entry]) => this.onHostResize(entry)), takeUntil(this._destroyed$)).subscribe();
            });
        }
    }
    ngAfterViewInit() {
        if (this._platform.isBrowser) {
            this.items.notifyOnChanges();
            this.items.changes.pipe(startWith(null), tap(() => {
                // Disconnect all and reconnect later
                this.visibleElements.forEach((item) => {
                    this.intersectionObserver.unobserve(item.target);
                });
                // Connect with the new items
                this.items.toArray().map((item) => {
                    this.intersectionObserver.observe(item.element);
                });
            }), takeUntil(this._destroyed$)).subscribe();
        }
    }
    ngAfterViewChecked() {
        if (this.config.itemAutosize && this._platform.isBrowser) {
            this.slider.style.setProperty('--slider-centralize-start-size', this.adapter.getCentralizerStartSize() + 'px');
            this.slider.style.setProperty('--slider-centralize-end-size', this.adapter.getCentralizerEndSize() + 'px');
        }
    }
    ngOnDestroy() {
        this._destroyed$.next();
        this._destroyed$.complete();
        this.deactivateGestures();
    }
    trackByFn(index, item) {
        return item.type;
    }
    onHostResize(entry) {
        const width = Math.ceil(entry.contentRect.width);
        const height = Math.ceil(entry.contentRect.height);
        this.slider.style.width = `${width}px`;
        this.slider.style.height = `${height}px`;
        this.scrollToIndex(this.state.currIndex, 'auto');
        // Detect changes on gallery-item components to re-calculate item size
        this._cd.detectChanges();
        this._gallery.debugConsole('🦐 [Gallery OnHostResize]: set viewport width to absolute number');
    }
    onViewportScroll() {
        // Check if scrolled item is great enough to navigate
        const currElement = this.items.get(this.state.currIndex)?.element;
        const elementAtCenter = this.getElementFromViewportCenter();
        if (elementAtCenter) {
            // Check if the gallery-item element is not the active element
            if (elementAtCenter !== currElement) {
                this.tryScrollToElement(elementAtCenter);
            }
        }
        else {
            this._gallery.debugConsole('⁉ [Gallery onViewportScroll]: No center element was found');
            this.visibleElements.forEach((entry) => {
                this.tryScrollToElement(entry.target);
            });
        }
    }
    tryScrollToElement(elementAtCenter) {
        const allowedMargin = 10;
        const offsetDiff = (this.adapter.clientSize - this.adapter.getClientSize(elementAtCenter)) / 2;
        const rangeStart = this.adapter.scrollValue + offsetDiff;
        const rangeEnd = this.adapter.scrollValue + this.adapter.clientSize - offsetDiff;
        const elStart = this.adapter.getOffsetSize(elementAtCenter);
        const elEnd = elStart + this.adapter.getClientSize(elementAtCenter);
        const isStart = rangeStart + allowedMargin >= elStart && rangeStart - allowedMargin <= elStart;
        const isEnd = rangeEnd + allowedMargin >= elEnd && rangeEnd - allowedMargin <= elEnd;
        // Reset position
        this.slider.style.scrollSnapType = this.adapter.scrollSnapType;
        // Check if element is within the detection range
        if (isStart && isEnd) {
            // If element is within the range set it as the active gallery item
            this._gallery.debugConsole('🍄 [Gallery onViewportScroll]: Set active gallery item');
            const index = +elementAtCenter.getAttribute('galleryIndex');
            this._zone.run(() => this._gallery.ref(this.galleryId).set(index, 'smooth'));
        }
    }
    scrollToIndex(value, behavior, onEnd) {
        this.scrollHandler$.next({ value, behavior, onEnd });
    }
    enableDisableGestures() {
        // Enable/Disable mouse sliding on desktop browser only
        if (!this._platform.IOS && !this._platform.ANDROID) {
            if (!this.config.mouseSlidingDisabled) {
                this.activateGestures();
            }
            else {
                this.deactivateGestures();
            }
        }
    }
    activateGestures() {
        if (typeof Hammer !== 'undefined') {
            // Destroy hammer if a previous instance was created
            this.deactivateGestures();
            const direction = this.adapter.panDirection;
            // Activate gestures
            this._zone.runOutsideAngular(() => {
                this._hammer = new Hammer(this._el.nativeElement, { inputClass: Hammer.MouseInput });
                this._hammer.get('pan').set({ direction });
                let panOffset;
                // Set panOffset for sliding on pan start event
                this._hammer.on('panstart', () => {
                    this._smoothScroll.dismissOngoingScroll(this.slider);
                    panOffset = this.adapter.scrollValue;
                    // Disable scroll-snap-type functionality
                    this.slider.style.scrollSnapType = 'unset';
                    this.slider.classList.add('g-sliding');
                    this._isPanning = true;
                });
                this._hammer.on('panmove', (e) => this.slider.scrollTo(this.adapter.getPanValue(panOffset, e, 'auto')));
                this._hammer.on('panend', (e) => this.onPanEnd(e));
            });
        }
    }
    deactivateGestures() {
        this._hammer?.destroy();
    }
    onPanEnd(e) {
        this._gallery.debugConsole('🖱️ [Gallery]: onPanEnd', e);
        this.slider.classList.remove('g-sliding');
        const delta = this.adapter.getPanDelta(e);
        const velocity = this.adapter.getPanVelocity(e);
        const galleryRef = this._gallery.ref(this.galleryId);
        this._zone.run(() => {
            // Check if scrolled item is great enough to navigate
            const currElement = this.items.get(this.state.currIndex)?.element;
            // Find the gallery item element in the center elements
            const elementAtCenter = this.getElementFromViewportCenter();
            // Check if center item can be taken from element using
            if (elementAtCenter && elementAtCenter !== currElement) {
                const index = +elementAtCenter.getAttribute('galleryIndex');
                this.scrollToIndex(index, 'smooth');
                return;
            }
            // Check if delta is great enough to navigate
            if (Math.abs(delta) > (currElement.clientWidth || this.adapter.clientSize) / 2) {
                return delta > 0 ? galleryRef.prev('smooth', false) : galleryRef.next('smooth', false);
            }
            // Check if velocity is great enough to navigate
            if (Math.abs(velocity) > 0.3) {
                return velocity > 0 ? galleryRef.prev('smooth', false) : galleryRef.next('smooth', false);
            }
            // Reset position to the current index
            this.scrollToIndex(this.state.currIndex, 'smooth');
        });
    }
    getElementFromViewportCenter() {
        // Get slider position relative to the document
        const sliderRect = this.slider.getBoundingClientRect();
        // Try look for the center item using `elementsFromPoint` function
        const centerElements = document.elementsFromPoint(sliderRect.x + (sliderRect.width / 2), sliderRect.y + (sliderRect.height / 2));
        // Find the gallery item element in the center elements
        const element = centerElements.find((element) => element.localName === 'gallery-item' && element.getAttribute('galleryId') === this.galleryId);
        this._gallery.debugConsole('🪟 [Gallery]: getElementFromViewportCenter', element);
        return element;
    }
    createIntersectionObserver(slider) {
        return new Observable((observer) => {
            this.intersectionObserver = new IntersectionObserver((entries) => observer.next(entries), { root: slider });
            return () => this.intersectionObserver.disconnect();
        }).pipe(mergeMap((entries) => entries), distinctUntilChanged());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: GallerySliderComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i1.Platform }, { token: i2.SmoothScrollManager }, { token: i3.Gallery }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.1", type: GallerySliderComponent, isStandalone: true, selector: "gallery-slider", inputs: { galleryId: "galleryId", state: "state", config: "config" }, outputs: { itemClick: "itemClick", error: "error" }, viewQueries: [{ propertyName: "sliderEl", first: true, predicate: ["slider"], descendants: true, static: true }, { propertyName: "items", predicate: GalleryItemComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div #slider
         class="g-slider"
         [attr.centralised]="config.itemAutosize">
      <div class="g-slider-content">
        <gallery-item *ngFor="let item of state.items; trackBy: trackByFn; index as i"
                      [attr.galleryId]="galleryId"
                      [type]="item.type"
                      [config]="config"
                      [data]="item.data"
                      [currIndex]="state.currIndex"
                      [index]="i"
                      [count]="state.items.length"
                      (click)="itemClick.emit(i)"
                      (error)="error.emit({ itemIndex: i, error: $event })">
        </gallery-item>
      </div>
    </div>
    <ng-content></ng-content>
  `, isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: GalleryItemComponent, selector: "gallery-item", inputs: ["config", "index", "count", "currIndex", "type", "data"], outputs: ["error"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { GallerySliderComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.1", ngImport: i0, type: GallerySliderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gallery-slider',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <div #slider
         class="g-slider"
         [attr.centralised]="config.itemAutosize">
      <div class="g-slider-content">
        <gallery-item *ngFor="let item of state.items; trackBy: trackByFn; index as i"
                      [attr.galleryId]="galleryId"
                      [type]="item.type"
                      [config]="config"
                      [data]="item.data"
                      [currIndex]="state.currIndex"
                      [index]="i"
                      [count]="state.items.length"
                      (click)="itemClick.emit(i)"
                      (error)="error.emit({ itemIndex: i, error: $event })">
        </gallery-item>
      </div>
    </div>
    <ng-content></ng-content>
  `,
                    standalone: true,
                    imports: [CommonModule, GalleryItemComponent]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i1.Platform }, { type: i2.SmoothScrollManager }, { type: i3.Gallery }]; }, propDecorators: { galleryId: [{
                type: Input
            }], state: [{
                type: Input
            }], config: [{
                type: Input
            }], itemClick: [{
                type: Output
            }], error: [{
                type: Output
            }], sliderEl: [{
                type: ViewChild,
                args: ['slider', { static: true }]
            }], items: [{
                type: ViewChildren,
                args: [GalleryItemComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,